#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rdapi:server');
var http = require('http');
const soketIo = require('socket.io');
let broadcaster;



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = soketIo(server);
/* Socket IO demande de controle  */
io.on('connection', (socket) => {
  console.log('connected to Socket Io')
  // makeing call 
  socket.on('call', (data) => {
    console.log('recived call from ' + data.offre);
    socket.broadcast.emit('calling', { offer: data.offre, callId: data.callId })
  })
  // answering the call 
  socket.on("make-answer", data => {
    console.log('ok')
    socket.broadcast.emit("answer-made", {
      callId: data.callId,
      answer: data.answer
    });
  });

  socket.on('cancel', (callId) => {
    socket.broadcast.emit('cancelClient', callId)
  })
  socket.on("broadcaster", () => {
    console.log('broadcaster')
    broadcaster = socket.id;
    socket.broadcast.emit("broadcaster");
  });
  socket.on("watcher", () => {
    socket.broadcast.emit("watcher", socket.id);
  });
  socket.on("offer", (id, message) => {
    console.log('offer ' + message)
    socket.to(id).emit("offer", { id: socket.id, message: message });
  });
  socket.on("answer", (id, message) => {
    console.log('answer ' + message)
    socket.to(id).emit("answer", { id: socket.id, message: message });
  });
  socket.on("candidate", (id, message) => {
    console.log('candidate' + message)
    socket.to(id).emit("candidate", { id: socket.id, message: message });
  });
  socket.on("disconnect", () => {
    socket.to(broadcaster).emit("disconnectPeer", socket.id);
  });


})


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
